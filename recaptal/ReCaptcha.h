/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ReCaptcha_H
#define ReCaptcha_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ReCaptcha_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ReCaptchaIf {
 public:
  virtual ~ReCaptchaIf() {}
  virtual void doCenterScan(FontCenterScanResponse& _return, const FontCenterScanRequest& req) = 0;
  virtual void doCenterScanByIndex(FontCenterScanIndexResponse& _return, const FontCenterScanIndexRequest& req) = 0;
  virtual void giveCenterScanFeedback(FontCenterScanIndexFeedbackResponse& _return, const FontCenterScanIndexFeedbackRequest& req) = 0;
};

class ReCaptchaIfFactory {
 public:
  typedef ReCaptchaIf Handler;

  virtual ~ReCaptchaIfFactory() {}

  virtual ReCaptchaIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ReCaptchaIf* /* handler */) = 0;
};

class ReCaptchaIfSingletonFactory : virtual public ReCaptchaIfFactory {
 public:
  ReCaptchaIfSingletonFactory(const boost::shared_ptr<ReCaptchaIf>& iface) : iface_(iface) {}
  virtual ~ReCaptchaIfSingletonFactory() {}

  virtual ReCaptchaIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ReCaptchaIf* /* handler */) {}

 protected:
  boost::shared_ptr<ReCaptchaIf> iface_;
};

class ReCaptchaNull : virtual public ReCaptchaIf {
 public:
  virtual ~ReCaptchaNull() {}
  void doCenterScan(FontCenterScanResponse& /* _return */, const FontCenterScanRequest& /* req */) {
    return;
  }
  void doCenterScanByIndex(FontCenterScanIndexResponse& /* _return */, const FontCenterScanIndexRequest& /* req */) {
    return;
  }
  void giveCenterScanFeedback(FontCenterScanIndexFeedbackResponse& /* _return */, const FontCenterScanIndexFeedbackRequest& /* req */) {
    return;
  }
};

typedef struct _ReCaptcha_doCenterScan_args__isset {
  _ReCaptcha_doCenterScan_args__isset() : req(false) {}
  bool req :1;
} _ReCaptcha_doCenterScan_args__isset;

class ReCaptcha_doCenterScan_args {
 public:

  ReCaptcha_doCenterScan_args(const ReCaptcha_doCenterScan_args&);
  ReCaptcha_doCenterScan_args& operator=(const ReCaptcha_doCenterScan_args&);
  ReCaptcha_doCenterScan_args() {
  }

  virtual ~ReCaptcha_doCenterScan_args() throw();
  FontCenterScanRequest req;

  _ReCaptcha_doCenterScan_args__isset __isset;

  void __set_req(const FontCenterScanRequest& val);

  bool operator == (const ReCaptcha_doCenterScan_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const ReCaptcha_doCenterScan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReCaptcha_doCenterScan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReCaptcha_doCenterScan_pargs {
 public:


  virtual ~ReCaptcha_doCenterScan_pargs() throw();
  const FontCenterScanRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReCaptcha_doCenterScan_result__isset {
  _ReCaptcha_doCenterScan_result__isset() : success(false) {}
  bool success :1;
} _ReCaptcha_doCenterScan_result__isset;

class ReCaptcha_doCenterScan_result {
 public:

  ReCaptcha_doCenterScan_result(const ReCaptcha_doCenterScan_result&);
  ReCaptcha_doCenterScan_result& operator=(const ReCaptcha_doCenterScan_result&);
  ReCaptcha_doCenterScan_result() {
  }

  virtual ~ReCaptcha_doCenterScan_result() throw();
  FontCenterScanResponse success;

  _ReCaptcha_doCenterScan_result__isset __isset;

  void __set_success(const FontCenterScanResponse& val);

  bool operator == (const ReCaptcha_doCenterScan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ReCaptcha_doCenterScan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReCaptcha_doCenterScan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReCaptcha_doCenterScan_presult__isset {
  _ReCaptcha_doCenterScan_presult__isset() : success(false) {}
  bool success :1;
} _ReCaptcha_doCenterScan_presult__isset;

class ReCaptcha_doCenterScan_presult {
 public:


  virtual ~ReCaptcha_doCenterScan_presult() throw();
  FontCenterScanResponse* success;

  _ReCaptcha_doCenterScan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ReCaptcha_doCenterScanByIndex_args__isset {
  _ReCaptcha_doCenterScanByIndex_args__isset() : req(false) {}
  bool req :1;
} _ReCaptcha_doCenterScanByIndex_args__isset;

class ReCaptcha_doCenterScanByIndex_args {
 public:

  ReCaptcha_doCenterScanByIndex_args(const ReCaptcha_doCenterScanByIndex_args&);
  ReCaptcha_doCenterScanByIndex_args& operator=(const ReCaptcha_doCenterScanByIndex_args&);
  ReCaptcha_doCenterScanByIndex_args() {
  }

  virtual ~ReCaptcha_doCenterScanByIndex_args() throw();
  FontCenterScanIndexRequest req;

  _ReCaptcha_doCenterScanByIndex_args__isset __isset;

  void __set_req(const FontCenterScanIndexRequest& val);

  bool operator == (const ReCaptcha_doCenterScanByIndex_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const ReCaptcha_doCenterScanByIndex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReCaptcha_doCenterScanByIndex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReCaptcha_doCenterScanByIndex_pargs {
 public:


  virtual ~ReCaptcha_doCenterScanByIndex_pargs() throw();
  const FontCenterScanIndexRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReCaptcha_doCenterScanByIndex_result__isset {
  _ReCaptcha_doCenterScanByIndex_result__isset() : success(false) {}
  bool success :1;
} _ReCaptcha_doCenterScanByIndex_result__isset;

class ReCaptcha_doCenterScanByIndex_result {
 public:

  ReCaptcha_doCenterScanByIndex_result(const ReCaptcha_doCenterScanByIndex_result&);
  ReCaptcha_doCenterScanByIndex_result& operator=(const ReCaptcha_doCenterScanByIndex_result&);
  ReCaptcha_doCenterScanByIndex_result() {
  }

  virtual ~ReCaptcha_doCenterScanByIndex_result() throw();
  FontCenterScanIndexResponse success;

  _ReCaptcha_doCenterScanByIndex_result__isset __isset;

  void __set_success(const FontCenterScanIndexResponse& val);

  bool operator == (const ReCaptcha_doCenterScanByIndex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ReCaptcha_doCenterScanByIndex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReCaptcha_doCenterScanByIndex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReCaptcha_doCenterScanByIndex_presult__isset {
  _ReCaptcha_doCenterScanByIndex_presult__isset() : success(false) {}
  bool success :1;
} _ReCaptcha_doCenterScanByIndex_presult__isset;

class ReCaptcha_doCenterScanByIndex_presult {
 public:


  virtual ~ReCaptcha_doCenterScanByIndex_presult() throw();
  FontCenterScanIndexResponse* success;

  _ReCaptcha_doCenterScanByIndex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ReCaptcha_giveCenterScanFeedback_args__isset {
  _ReCaptcha_giveCenterScanFeedback_args__isset() : req(false) {}
  bool req :1;
} _ReCaptcha_giveCenterScanFeedback_args__isset;

class ReCaptcha_giveCenterScanFeedback_args {
 public:

  ReCaptcha_giveCenterScanFeedback_args(const ReCaptcha_giveCenterScanFeedback_args&);
  ReCaptcha_giveCenterScanFeedback_args& operator=(const ReCaptcha_giveCenterScanFeedback_args&);
  ReCaptcha_giveCenterScanFeedback_args() {
  }

  virtual ~ReCaptcha_giveCenterScanFeedback_args() throw();
  FontCenterScanIndexFeedbackRequest req;

  _ReCaptcha_giveCenterScanFeedback_args__isset __isset;

  void __set_req(const FontCenterScanIndexFeedbackRequest& val);

  bool operator == (const ReCaptcha_giveCenterScanFeedback_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const ReCaptcha_giveCenterScanFeedback_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReCaptcha_giveCenterScanFeedback_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReCaptcha_giveCenterScanFeedback_pargs {
 public:


  virtual ~ReCaptcha_giveCenterScanFeedback_pargs() throw();
  const FontCenterScanIndexFeedbackRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReCaptcha_giveCenterScanFeedback_result__isset {
  _ReCaptcha_giveCenterScanFeedback_result__isset() : success(false) {}
  bool success :1;
} _ReCaptcha_giveCenterScanFeedback_result__isset;

class ReCaptcha_giveCenterScanFeedback_result {
 public:

  ReCaptcha_giveCenterScanFeedback_result(const ReCaptcha_giveCenterScanFeedback_result&);
  ReCaptcha_giveCenterScanFeedback_result& operator=(const ReCaptcha_giveCenterScanFeedback_result&);
  ReCaptcha_giveCenterScanFeedback_result() {
  }

  virtual ~ReCaptcha_giveCenterScanFeedback_result() throw();
  FontCenterScanIndexFeedbackResponse success;

  _ReCaptcha_giveCenterScanFeedback_result__isset __isset;

  void __set_success(const FontCenterScanIndexFeedbackResponse& val);

  bool operator == (const ReCaptcha_giveCenterScanFeedback_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ReCaptcha_giveCenterScanFeedback_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReCaptcha_giveCenterScanFeedback_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReCaptcha_giveCenterScanFeedback_presult__isset {
  _ReCaptcha_giveCenterScanFeedback_presult__isset() : success(false) {}
  bool success :1;
} _ReCaptcha_giveCenterScanFeedback_presult__isset;

class ReCaptcha_giveCenterScanFeedback_presult {
 public:


  virtual ~ReCaptcha_giveCenterScanFeedback_presult() throw();
  FontCenterScanIndexFeedbackResponse* success;

  _ReCaptcha_giveCenterScanFeedback_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ReCaptchaClient : virtual public ReCaptchaIf {
 public:
  ReCaptchaClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReCaptchaClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void doCenterScan(FontCenterScanResponse& _return, const FontCenterScanRequest& req);
  void send_doCenterScan(const FontCenterScanRequest& req);
  void recv_doCenterScan(FontCenterScanResponse& _return);
  void doCenterScanByIndex(FontCenterScanIndexResponse& _return, const FontCenterScanIndexRequest& req);
  void send_doCenterScanByIndex(const FontCenterScanIndexRequest& req);
  void recv_doCenterScanByIndex(FontCenterScanIndexResponse& _return);
  void giveCenterScanFeedback(FontCenterScanIndexFeedbackResponse& _return, const FontCenterScanIndexFeedbackRequest& req);
  void send_giveCenterScanFeedback(const FontCenterScanIndexFeedbackRequest& req);
  void recv_giveCenterScanFeedback(FontCenterScanIndexFeedbackResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ReCaptchaProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ReCaptchaIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ReCaptchaProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_doCenterScan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_doCenterScanByIndex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_giveCenterScanFeedback(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ReCaptchaProcessor(boost::shared_ptr<ReCaptchaIf> iface) :
    iface_(iface) {
    processMap_["doCenterScan"] = &ReCaptchaProcessor::process_doCenterScan;
    processMap_["doCenterScanByIndex"] = &ReCaptchaProcessor::process_doCenterScanByIndex;
    processMap_["giveCenterScanFeedback"] = &ReCaptchaProcessor::process_giveCenterScanFeedback;
  }

  virtual ~ReCaptchaProcessor() {}
};

class ReCaptchaProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ReCaptchaProcessorFactory(const ::boost::shared_ptr< ReCaptchaIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ReCaptchaIfFactory > handlerFactory_;
};

class ReCaptchaMultiface : virtual public ReCaptchaIf {
 public:
  ReCaptchaMultiface(std::vector<boost::shared_ptr<ReCaptchaIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ReCaptchaMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ReCaptchaIf> > ifaces_;
  ReCaptchaMultiface() {}
  void add(boost::shared_ptr<ReCaptchaIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void doCenterScan(FontCenterScanResponse& _return, const FontCenterScanRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->doCenterScan(_return, req);
    }
    ifaces_[i]->doCenterScan(_return, req);
    return;
  }

  void doCenterScanByIndex(FontCenterScanIndexResponse& _return, const FontCenterScanIndexRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->doCenterScanByIndex(_return, req);
    }
    ifaces_[i]->doCenterScanByIndex(_return, req);
    return;
  }

  void giveCenterScanFeedback(FontCenterScanIndexFeedbackResponse& _return, const FontCenterScanIndexFeedbackRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->giveCenterScanFeedback(_return, req);
    }
    ifaces_[i]->giveCenterScanFeedback(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ReCaptchaConcurrentClient : virtual public ReCaptchaIf {
 public:
  ReCaptchaConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReCaptchaConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void doCenterScan(FontCenterScanResponse& _return, const FontCenterScanRequest& req);
  int32_t send_doCenterScan(const FontCenterScanRequest& req);
  void recv_doCenterScan(FontCenterScanResponse& _return, const int32_t seqid);
  void doCenterScanByIndex(FontCenterScanIndexResponse& _return, const FontCenterScanIndexRequest& req);
  int32_t send_doCenterScanByIndex(const FontCenterScanIndexRequest& req);
  void recv_doCenterScanByIndex(FontCenterScanIndexResponse& _return, const int32_t seqid);
  void giveCenterScanFeedback(FontCenterScanIndexFeedbackResponse& _return, const FontCenterScanIndexFeedbackRequest& req);
  int32_t send_giveCenterScanFeedback(const FontCenterScanIndexFeedbackRequest& req);
  void recv_giveCenterScanFeedback(FontCenterScanIndexFeedbackResponse& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
